// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace DNATestingSystem.Repository.NhanVT.Models;

public partial class SE18_PRN232_SE1730_G3_DNATestingSystemContext : DbContext
{
    public SE18_PRN232_SE1730_G3_DNATestingSystemContext()
    {
    }

    public SE18_PRN232_SE1730_G3_DNATestingSystemContext(DbContextOptions<SE18_PRN232_SE1730_G3_DNATestingSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ServiceCategoriesNhanVt> ServiceCategoriesNhanVts { get; set; }

    public virtual DbSet<ServicesNhanVt> ServicesNhanVts { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ServiceCategoriesNhanVt>(entity =>
        {
            entity.HasKey(e => e.ServiceCategoryNhanVtid).HasName("PK__ServiceC__F96A229D02823382");

            entity.ToTable("ServiceCategoriesNhanVT");

            entity.Property(e => e.ServiceCategoryNhanVtid).HasColumnName("ServiceCategoryNhanVTID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
        });

        modelBuilder.Entity<ServicesNhanVt>(entity =>
        {
            entity.HasKey(e => e.ServicesNhanVtid).HasName("PK__Services__049747BFC57371BD");

            entity.ToTable("ServicesNhanVT");

            entity.Property(e => e.ServicesNhanVtid).HasColumnName("ServicesNhanVTID");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsClinicVisitAllowed).HasDefaultValue(false);
            entity.Property(e => e.IsHomeVisitAllowed).HasDefaultValue(false);
            entity.Property(e => e.IsSelfSampleAllowed).HasDefaultValue(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Price)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(12, 2)");
            entity.Property(e => e.ServiceCategoryNhanVtid).HasColumnName("ServiceCategoryNhanVTID");
            entity.Property(e => e.ServiceName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.ServiceCategoryNhanVt).WithMany(p => p.ServicesNhanVts)
                .HasForeignKey(d => d.ServiceCategoryNhanVtid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServicesNhanVT_ServiceCategoriesNhanVT");
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}